close all;
clear;
clc;

%%
% network trained with images: [0 1] -> normalized, 
%                              [0 255] ->  not_normalized
dataset_ = 'MNIST';
net_ = 'tanh_100_50';
normalized = 0;


norm_ = '';
if normalized
    norm_ = '_normalized'
end
net_dir = sprintf('%s/nets/%s/MNIST_%s%s_DenseNet.mat', dataset_,net_, net_, norm_)
% image_dir = sprintf('data/%s.csv',net_);
% image_dir = sprintf('data/%s_100images.csv',net_);
image_dir = sprintf('%s/data/%s%s_raw.csv',dataset_,net_, norm_)

normalized = 1;
%% load network
load(net_dir);
if strcmp(net.Layers(4).Type,'Sigmoid')
    act_fn = 'logsig';
elseif strcmp(net.Layers(4).Type,'Tanh')
    act_fn = 'tansig';
end
L1 = LayerS(net.Layers(3).Weights, net.Layers(3).Bias, act_fn);
L2 = LayerS(net.Layers(5).Weights, net.Layers(5).Bias, act_fn);
L3 = LayerS(net.Layers(7).Weights, net.Layers(7).Bias, 'purelin');
nnv_net = FFNNS([L1 L2 L3]);

%% load images
csv_data = csvread(image_dir);
IM_labels = csv_data(:,1);
IM_data = csv_data(:,2:end)';

reachMethod = 'approx-star';
% reachMethod = 'rstar-absdom-two';
% reachMethod = 'absdom';
% reachMethod = 'approx-zono';

relaxFactor = [0];
numCores = 1;
disp_opt = 0;
lp_solver = 'linprog' % 'linprog'

%eps = [0, 1, 2, 3, 4, 5, 6, 7, 8];
% eps = [0.010, 0.012, 0.014, 0.016, 0.018, 0.020, 0.022, 0.024, 0.026, 0.028, 0.030];
eps = [0.01, 0.011, 0.012, 0.013, 0.014, 0.015, 0.016, 0.017, 0.018, 0.019, 0.02];
% eps = [0.001, 0.0011, 0.0012, 0.0013, 0.0014, 0.0015, 0.0016, 0.0017, 0.0018, 0.0019, 0.0020]
% eps = [0.01, 0.02, 0.03, 0.04, 0.05];
% eps = 0.01;
% eps = 0.001;

N = size(IM_data, 2);
K = length(relaxFactor);
M = length(eps);

r = zeros(K, M); % percentage of images that are robust
rb = cell(K, M); % detail robustness verification result
cE = cell(K, M); % detail counterexamples
vt = cell(K, M); % detail verification time
cands = cell(K,M); % counterexample
total_vt = zeros(K, M); % total verification time

% Tanh_100_100_eps030 = [1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25, ...
%     27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53] % tanh_100_100_eps030
% Tanh_100_100_eps020 = [1,2,4,5,6,7,10,11,13,14,15,16,17,18,20,22,23,24,25, ...
%     27,28,29,30,31,33,36,37,38,40,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,59,61,65,68,69,70] % tanh_100_100_eps020


% S = [];
% j = 1;
% eps(j)
% images = attack_images(IM_data, eps(j), reachMethod, normalized); 
% labels = IM_labels+1;
% for s = 1:N
%     [r, rb, cE, cands, vt] = nnv_net.evaluateRBN(images(s), labels(s), reachMethod, numCores, relaxFactor , disp_opt, lp_solver);
%     if  rb==1 && j == 1
%         s
%         S = [S s];
%     end
% end
% 
% 
% IM = [IM_labels(S) IM_data(:,S)'];
% writematrix(IM,'MNIST/data/tanh_100_50_eps020.csv');

% S = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,...
%     31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50];

S = [1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,20,22,23,24,25,27,28,29,30,...
    31,32,33,35,36,37,38,40,41,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57];

% j = 1;
% eps(j)
% images = attack_images(IM_data, eps(j), reachMethod, normalized); 
% labels = IM_labels+1;
% for s = 1:length(S)
%     [r, rb, cE, cands, vt] = nnv_net.evaluateRBN(images(S(s)), labels(S(s)), reachMethod, numCores, relaxFactor , disp_opt, lp_solver);
%     safe = [sum(rb==1)];
%     unsafe = [sum(rb == 0)];
%     unknown = [sum(rb == 2)];
%     
% %     if  rb==1 && j == 1
% %         S = [S s];
% %     end
%     if rb ~= 1
%         s
%         fprintf('S(s): %d',S(s));
%         Ta = table(eps(j), safe, unsafe, unknown, vt)
%     end
% end
% S

% IM = [IM_labels(S) IM_data(:,S)'];
% writematrix(IM,'sigmoid_100_100_new.csv');

% S = [1,2,4,5,6,7,10,11,13,14,15,16,17,18,20,22,23,24,25, ...
%     26,27,28,29,30,31,33,35,36,37,38,40,42,43,44,45,46,48,49,50,51,52,53,54,55,56,57,59,61,65,68] % tanh_100_100_eps020
% for i=1:length(S)
%     for j=1:M
%         images = attack_images(IM_data(S), eps(j), reachMethod, normalized); 
%         labels = IM_labels+1;
%         t = tic;
%         [r(i,j), rb{i,j}, cE{i,j}, cands{i,j}, vt{i,j}] = nnv_net.evaluateRBN(images(S(i)), labels(S(i)), reachMethod, numCores, relaxFactor , disp_opt, lp_solver);
%         total_vt(i,j) = toc(t);
%     end
% end

% N = 50;



% 70, 71, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
% 90

% IM = [IM_labels(S) IM_data(:,S)'];
% writematrix(IM,'tan_100_50_020.csv');

for k = 23:length(S)
    k
    fprintf('S(k): %d\n',S(k));
    i=1;
        for j=1:M
            eps(j)
            images = attack_images(IM_data, eps(j), reachMethod, normalized); 
            labels = IM_labels+1;
            t = tic;
            [r(i,j), rb{i,j}, cE{i,j}, cands{i,j}, vt{i,j}] = nnv_net.evaluateRBN(images(S(k)), labels(S(k)), reachMethod, numCores, relaxFactor , disp_opt, lp_solver)
            total_vt(i,j) = toc(t);
        end
    
end

IM = [IM_labels(S) IM_data(:,S)'];
writematrix(IM,'MNIST/data/tanh_100_50_eps020_new.csv');

T = table;
%rf = [];
ep = [];
VT = [];
RB = [];
US = [];
UK = [];
for i=1:K
    %rf = [rf; relaxFactor(i)*ones(M,1)];
    ep = [ep; eps'];
    unsafe = zeros(M,1);
    robust = zeros(M,1);
    unknown = zeros(M,1);
    for j=1:M
        unsafe(j) = sum(rb{i,j}==0);
        robust(j) = sum(rb{i,j} == 1);
        unknown(j) = sum(rb{i,j}==2);
    end
    RB = [RB; robust];
    US = [US; unsafe];
    UK = [UK; unknown];
    VT = [VT; total_vt(i,:)'];
end
%T.relaxFactor = rf;
T.epsilon = ep;
T.robustness = RB;
T.unsafe = US;
T.unknown = UK;
T.verifyTime = VT;

fprintf('%s', reachMethod);
T

% save_ = sprintf('result/%s_%s%s_%s_%s', dataset_, net_, norm_, reachMethod, datetime('today'))
% save(save_, 'lp_solver', 'T', 'r', 'rb', 'cE', 'cands', 'vt', 'total_vt');

function images = attack_images(in_images, epsilon, reachMethod, normalized)
    if normalized
        max_px = 1.0;
    else
        max_px = 255.0;
    end
    
    
    N = size(in_images, 2);
    for n = 1:N
        image = in_images(:, n);
        if normalized
            image = image/255.0;
        end
        lb = image - epsilon;
        ub = image + epsilon;
        ub(ub > max_px) = max_px;
        lb(lb < 0.0) = 0.0;
        
        if strcmp(reachMethod,'approx-star')
            images(n) = Star(lb, ub);
        elseif strcmp(reachMethod,'rstar-absdom-two')
            images(n) = RStar(lb, ub, inf);
        elseif strcmp(reachMethod,'absdom')
            images(n) = AbsDom(lb, ub, inf);
        elseif strcmp(reachMethod,'approx-zono')
            B = Box(lb, ub);
            images(n) = B.toZono;
        else
           error('unsupported reachMethod for evaluateRBN')
        end
    end
end
